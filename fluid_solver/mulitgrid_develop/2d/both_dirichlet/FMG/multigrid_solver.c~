void mult_solve(double *y,double *f)
{
	int mesh_tracker=0;//we will first start our computations from the finest grid
		
	int iter=0;//this will count the no. of iterations at a particular mesh level 	

	double error=0.0,old_error;

	printf("At the level=%d\n",mesh_tracker);

	//relaxing on the grid using red-black gauss-seidel (see "relaxation.c")
	for( ; ; ) //I can break out of this loop under a particular situation 
	{
		old_error=error;//transferring the old error to the current error		
				
		error=relax(y,f,mesh_tracker);//this is a single iteration of the red-black gauss-seidel
		
		iter++;//updating the no. of iterations at the current level

		printf("iter=%d\terror=%lf\n",iter,error);

		//there is a minimum no. of iterations to be performed on every grid
		if(iter<MIN_NUM_ITER)
		{
			continue;
		}
								
		//this is the exit condition
		//if after performing enough iterations on the finest the error is below the tolerance we exit the loop
		else if(error<TOLER && mesh_tracker==0)
		{
			break;
		}

		//condition for moving to fine grid
		//convergence fine, enough iterations done (see the subtle difference from the previous condition)
		else if(error<TOLER)
		{
			//see "coarse_to_fine.c"
			//this routine will serve an initial guess for the finer grid relaxation
			ctof(y,mesh_tracker);
			
			//updating a new value of mesh tracker
			mesh_tracker++;//a finer grid is the exisiting value +1 

			printf("At the level=%d\n",mesh_tracker);
		}

		//condition for moving onto a coarser grid
		//convergence slow, have coarser grids left
		else if(old_error*TOLER_RATE<error && mesh_tracker>NO_OF_LEVELS-1)			
		{
			//see "fine_to_coarse.c"						
			ftoc(y,f,mesh_tracker);	

			//updating a new value of mesh tracker
			mesh_tracker--;//a coarser grid is the exisiting value -1 

			printf("At the level=%d\n",mesh_tracker);
		}
	}//closing the 'for' loop

}
	
		
		
					
		
					
