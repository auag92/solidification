void odd_rb_solve(double *y,double *f,double *error)
{
	int i,j;
	double y_star,new_val;
	
	long array_index,array_index_up,array_index_below,array_index_left,array_index_right;

	long odd_check;

	for(j=0;j<nodes.y-1;j++) //leaving out the boundary points for the Dirichlet boundary condition 
	{
		for(i=0;i<nodes.x-1;i++)//leaving out the boundary points for the Dirichlet boundary condition 
		//but solving wherever flux conditions are imposed 
		{
			odd_check=i+j;

			if(odd_check%2!=0)//the sum of the indices are odd 	
			{
				array_index=i+nodes.x*j;
				array_index_left=(i-1)+nodes.x*j;
				array_index_right=(i+1)+nodes.x*j;
				array_index_up=i+nodes.x*(j+1);
				array_index_below=i+nodes.x*(j-1);
			
				//if(i==0 && j==0)
				//	y_star=	corner_prefac*(sq_dy*y[array_index_right]+sq_dx*y[array_index_up]-f[array_index]*sq_dx_times_sq_dy);

				if(i==0 && j>0)				
					y_star=g_s_prefac*(y[array_index_right]*2.0*sq_dy+(y[array_index_up]+y[array_index_below])*sq_dx-sq_dx_times_sq_dy*f[array_index]);

				else if(i!=0 && j==0)				
					y_star=g_s_prefac*(y[array_index_up]*2.0*sq_dx+(y[array_index_left]+y[array_index_right])*sq_dy-sq_dx_times_sq_dy*f[array_index]);
			
				else
					y_star=g_s_prefac*((y[array_index_left]+y[array_index_right])*sq_dy+(y[array_index_up]+y[array_index_below])*sq_dx-sq_dx_times_sq_dy*f[array_index]);


				new_val=y[array_index]+OMEGA*(y_star-y[array_index]);	

				*error+=(new_val-y[array_index])*(new_val-y[array_index]);

				y[array_index]=new_val;
			}
		}
	}

	
}				
