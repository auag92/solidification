void ftoc(double *y,double *f,int mesh_tracker)
{
	//the value of the residuals that has to be found 
	double res_2i_2j,res_2i_min_1_2j,res_2i_plus_1_2j;
	double res_2i_2j_min_1,res_2i_min_1_2j_min_1,res_2i_plus_1_2j_min_1;	
	double res_2i_2j_plus_1,res_2i_min_1_2j_plus_1,res_2i_plus_1_2j_plus_1;	
	
		
	long i,j;	

	long array_index_i_j;//the coarse grid array index 

	long temp_x,temp_y;//local coordinates for the finer grid

	int coarser_mesh_tracker=mesh_tracker+1;
	
	//I have to first initialise the coarse grid array to zero (because it might have a solution from a previous iteration
	for(j=0;j<=nodes[coarser_mesh_tracker].y-1;j++)
	{	
		for(i=0;i<=nodes[coarser_mesh_tracker].x-1;i++)//I am iterating over the entire coarse grid array including the boundary locations
		{
			array_index_i_j=(i+start[coarser_mesh_tracker])+nodes[coarser_mesh_tracker].x*j;		
		 
			y[array_index_i_j]=0.0;
		}
	}		
				
	//I am going to employ full weighting for the interpolation
	//the range of iterations is selected by the algorithm 
	//I am iterating over the points in the coarser grid
	//I am simply leaving out the boundary points as in a coarser grid for a Dirichlet problem they are always zero
	//If I don't leave out the boundary points I'll end up accessing array indices which are out of bounds  	

	for(j=0;j<=nodes[coarser_mesh_tracker].y-2;j++)
	{ 
		for(i=0;i<=nodes[coarser_mesh_tracker].x-2;i++)	
		{
			array_index_i_j=(i+start[coarser_mesh_tracker])+nodes[coarser_mesh_tracker].x*j;

			f[array_index_i_j]=res_2i_2j;

		}	

	}
}				
		
