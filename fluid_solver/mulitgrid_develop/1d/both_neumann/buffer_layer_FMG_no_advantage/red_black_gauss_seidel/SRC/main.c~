//weighted red-black gauss-seidel solver for y''=f(x) over the domain 0<x<1 with Neumann bondary condition at x=0 and x=1

//some system parameters

//=====================================//
//for setting up the domains
#define SYS_LEFT_END 0.0
#define SYS_RIGHT_END 1.0
//=====================================================================================================//
#define NO_OF_INTERVALS 64 //this must be a power of 2; this is going to be inclusive of the the 2 buffer points   
//=====================================================================================================//
#define OMEGA 1.0
#define INP_SEED 654321
#define NOISE_AMPLITUDE 1.0
#define TOLER 1e-10
#define OUTPUT_INTERVAL 1000
//=================================================================================================//
//this will be used to compute some properties like dx 
#define BUFFER_WIDTH 1//this is the width of the buffer layer that has to be created on either side
//====================================//

//the choice for the right hand side
#define ONE_MIN_2X_RHS//the other choices can be "ZERO_RHS" where the poisson equation converts into the laplace equation

//the choice for the boundary conditons (they are the values for the dependent variable first derivatives)
#define LEFT 0.0
#define RIGHT 0.0

//the choice for the inital guesses
#define ZERO //the other option can be "RANDOM"	

//some header files we are going to use 
#include<stdio.h>
#include<stdlib.h>
#include<math.h>

//some variables needed by the system
int nodes_x;//the no. of nodes in the system
double dx;

//some source function files
#include"ran2.c"
#include"initialise.c"
#include"set_boundary.c"
#include"set_rhs.c"
#include"red_black_solver.c"
#include"compute_mean.c"
#include"enforcing_zero_mean.c"
#include"write_profile.c"



main()
{
	
	//==============================================================================//
	int iter=0;

	double error=0.0;

	int start;
	//==============================================================================//

	//==============================================================================//
	//computing the exponent (N) in 2^N=NO_OF_INTERVALS
	int mesh_index;
	
	mesh_index=(int)((log((double)(NO_OF_INTERVALS))/log(2.0)));

	printf("The mesh index is=%d\n",mesh_index);
	 	  
	if((int)(pow((double)2,(double)mesh_index))!=NO_OF_INTERVALS)
	{
		printf("The no. of intervals in the grid is not a power of 2\n");
		exit(1);
	}
	//==============================================================================//

	//==============================================================================//
	//computing the dx for the current level 
	dx=(SYS_RIGHT_END-SYS_LEFT_END)/(NO_OF_INTERVALS-2*BUFFER_WIDTH);//As my no. of intervals also include 2 buffer intervals  

	nodes_x=(NO_OF_INTERVALS+1);

	printf("the no. of nodes in the system inlcuding buffer points=%d\n",nodes_x);
	//============================================================================//


	//============================================================================//	
	double *y; //the dependent variable arrays
	double *f; //the RHS array

	//allocating memory to the arrays
	
	if((y=(double *)malloc(nodes_x*sizeof(double)))==NULL)
	{
		printf("Space creation failed for the y array\n");
		exit(1);
	}
		 	
	if((f=(double *)malloc(nodes_x*sizeof(double)))==NULL)
	{
		printf("Space creation failed for the f array\n");
		exit(1);
	}
	
	//============================================================================//	

	//============================================================================//
	//initial guess (see "initialise.c") for the unknown points
	init(y);
	//============================================================================//

	
	//============================================================================//
	//setting up the RHS (see "set_rhs.c")
	rhs(f);	
	//============================================================================//

	//strating the iterations
	while(iter<2 || error>TOLER)	
	{

		error=0.0;

		//============================================================================//
		//setting up the boundary conditions (see "set_boundary.c")
		boundary(y);
		//============================================================================//

		//============================================================================//
		//solving the equation for the even update only(see "red_black_solver.c")
		start=2;
		rb_solve(y,f,start,&error);
		//===========================================================================//	

		
		//============================================================================//
		//solving the equation for the odd update only(see "red_black_solver.c")
		start=1;
		rb_solve(y,f,start,&error);
		//===========================================================================//	
	
		//===========================================================================//
		error=sqrt(error*dx);
		//===========================================================================//
	
		//===========================================================================//
		iter++;
		printf("iter=%d\terror=%lf\n",iter,error);

	//	getchar();
		//===========================================================================//


		//============================================================================//
		//trying to set up a zero mean solution (see "enforcing_zero_mean.c")
		enf_zero_mean(y);
		//============================================================================//



		//checking whether files have to be written
		if(iter%OUTPUT_INTERVAL==0)
		{
			printf("Files are going to be written\n");
		
			//see "write_profile.c"
			write(y,iter);
		}

		

	}//closing the iteration loop

	//again_writing the final files
	//see "write_profile.c"
	write(y,iter);

	free(y);
	free(f);	
}
	
		
				

						

			
